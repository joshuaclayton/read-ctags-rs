use super::language::Language;
use serde::Serialize;

#[derive(Debug, PartialEq, Serialize)]
pub enum TokenKind {
    // CSS
    Class,
    Id,
    Selector,
    // Elixir
    Macro,
    Callback,
    Delegate,
    Exception,
    Function,
    Guard,
    Implementation,
    Module,
    Operator,
    Protocol,
    Record,
    Test,
    Type,
    // Elm
    Alias,
    Constructor,
    Namespace,
    Port,
    // HTML
    Stylesheet,
    Script,
    Anchor,
    Heading1,
    Heading2,
    Heading3,
    // JSON
    Array,
    Boolean,
    Number,
    Object,
    String,
    Null,
    // JavaScript
    Constant,
    Getter,
    Setter,
    Generator,
    Method,
    Property,
    Variable,
    // Markdown
    Subsection,
    L4Subsection,
    Chapter,
    Section,
    SubSubsection,
    L5Subsection,
    // Ruby
    SingletonMethod,
    // SCSS
    Placeholder,
    Mixin,
    Parameter,
    // Sh
    Heredoc,
    // SVG
    Def,
    // TypeScript
    Enumerator,
    Enum,
    Interface,
    Local,
    // XML
    NSPrefix,
    Root,
    Undefined,
    MissingLanguageToken(Language, char),
    Unknown(char),
}

pub fn calculate_kind(language: Option<Language>, char: char) -> TokenKind {
    match (language, char) {
        (Some(Language::CSS), 'c') => TokenKind::Class,
        (Some(Language::CSS), 'i') => TokenKind::Id,
        (Some(Language::CSS), 's') => TokenKind::Selector,
        (Some(Language::Elixir), 'a') => TokenKind::Macro,
        (Some(Language::Elixir), 'c') => TokenKind::Callback,
        (Some(Language::Elixir), 'd') => TokenKind::Delegate,
        (Some(Language::Elixir), 'e') => TokenKind::Exception,
        (Some(Language::Elixir), 'f') => TokenKind::Function,
        (Some(Language::Elixir), 'g') => TokenKind::Guard,
        (Some(Language::Elixir), 'i') => TokenKind::Implementation,
        (Some(Language::Elixir), 'm') => TokenKind::Module,
        (Some(Language::Elixir), 'o') => TokenKind::Operator,
        (Some(Language::Elixir), 'p') => TokenKind::Protocol,
        (Some(Language::Elixir), 'r') => TokenKind::Record,
        (Some(Language::Elixir), 't') => TokenKind::Test,
        (Some(Language::Elixir), 'y') => TokenKind::Type,
        (Some(Language::Elm), 'a') => TokenKind::Alias,
        (Some(Language::Elm), 'c') => TokenKind::Constructor,
        (Some(Language::Elm), 'f') => TokenKind::Function,
        (Some(Language::Elm), 'm') => TokenKind::Module,
        (Some(Language::Elm), 'n') => TokenKind::Namespace,
        (Some(Language::Elm), 'p') => TokenKind::Port,
        (Some(Language::Elm), 't') => TokenKind::Type,
        (Some(Language::HTML), 'C') => TokenKind::Stylesheet,
        (Some(Language::HTML), 'I') => TokenKind::Id,
        (Some(Language::HTML), 'J') => TokenKind::Script,
        (Some(Language::HTML), 'a') => TokenKind::Anchor,
        (Some(Language::HTML), 'c') => TokenKind::Class,
        (Some(Language::HTML), 'h') => TokenKind::Heading1,
        (Some(Language::HTML), 'i') => TokenKind::Heading2,
        (Some(Language::HTML), 'j') => TokenKind::Heading3,
        (Some(Language::JSON), 'a') => TokenKind::Array,
        (Some(Language::JSON), 'b') => TokenKind::Boolean,
        (Some(Language::JSON), 'n') => TokenKind::Number,
        (Some(Language::JSON), 'o') => TokenKind::Object,
        (Some(Language::JSON), 's') => TokenKind::String,
        (Some(Language::JSON), 'z') => TokenKind::Null,
        (Some(Language::JavaScript), 'C') => TokenKind::Constant,
        (Some(Language::JavaScript), 'G') => TokenKind::Getter,
        (Some(Language::JavaScript), 'S') => TokenKind::Setter,
        (Some(Language::JavaScript), 'c') => TokenKind::Class,
        (Some(Language::JavaScript), 'f') => TokenKind::Function,
        (Some(Language::JavaScript), 'g') => TokenKind::Generator,
        (Some(Language::JavaScript), 'm') => TokenKind::Method,
        (Some(Language::JavaScript), 'p') => TokenKind::Property,
        (Some(Language::JavaScript), 'v') => TokenKind::Variable,
        (Some(Language::Markdown), 'S') => TokenKind::Subsection,
        (Some(Language::Markdown), 'T') => TokenKind::L4Subsection,
        (Some(Language::Markdown), 'c') => TokenKind::Chapter,
        (Some(Language::Markdown), 's') => TokenKind::Section,
        (Some(Language::Markdown), 't') => TokenKind::SubSubsection,
        (Some(Language::Markdown), 'u') => TokenKind::L5Subsection,
        (Some(Language::Ruby), 'S') => TokenKind::SingletonMethod,
        (Some(Language::Ruby), 'c') => TokenKind::Class,
        (Some(Language::Ruby), 'f') => TokenKind::Method,
        (Some(Language::Ruby), 'm') => TokenKind::Module,
        (Some(Language::SCSS), 'P') => TokenKind::Placeholder,
        (Some(Language::SCSS), 'c') => TokenKind::Class,
        (Some(Language::SCSS), 'f') => TokenKind::Function,
        (Some(Language::SCSS), 'i') => TokenKind::Id,
        (Some(Language::SCSS), 'm') => TokenKind::Mixin,
        (Some(Language::SCSS), 'v') => TokenKind::Variable,
        (Some(Language::SCSS), 'z') => TokenKind::Parameter,
        (Some(Language::Sh), 'a') => TokenKind::Alias,
        (Some(Language::Sh), 'f') => TokenKind::Function,
        (Some(Language::Sh), 'h') => TokenKind::Heredoc,
        (Some(Language::Sh), 's') => TokenKind::Script,
        (Some(Language::TypeScript), 'C') => TokenKind::Constant,
        (Some(Language::TypeScript), 'G') => TokenKind::Generator,
        (Some(Language::TypeScript), 'a') => TokenKind::Alias,
        (Some(Language::TypeScript), 'c') => TokenKind::Class,
        (Some(Language::TypeScript), 'e') => TokenKind::Enumerator,
        (Some(Language::TypeScript), 'f') => TokenKind::Function,
        (Some(Language::TypeScript), 'g') => TokenKind::Enum,
        (Some(Language::TypeScript), 'i') => TokenKind::Interface,
        (Some(Language::TypeScript), 'l') => TokenKind::Local,
        (Some(Language::TypeScript), 'm') => TokenKind::Method,
        (Some(Language::TypeScript), 'n') => TokenKind::Namespace,
        (Some(Language::TypeScript), 'p') => TokenKind::Property,
        (Some(Language::TypeScript), 'v') => TokenKind::Variable,
        (Some(Language::TypeScript), 'z') => TokenKind::Parameter,
        (Some(Language::XML), 'i') => TokenKind::Id,
        (Some(Language::XML), 'n') => TokenKind::NSPrefix,
        (Some(Language::XML), 'r') => TokenKind::Root,
        (Some(Language::SVG), 'd') => TokenKind::Def,
        (Some(Language::SVG), v) => calculate_kind(Some(Language::XML), v),
        (Some(l), c) => TokenKind::MissingLanguageToken(l, c),
        (None, c) => TokenKind::Unknown(c),
    }
}
